import java.util.regex.Pattern

buildscript {
    ext.support_version = '25.4.0'
    ext.kotlin_version = '1.1.3-2'
    ext.espresso_version = '3.0.0'
    ext.test_runner = '0.5'
    ext.mockito_kotlin = '1.3.0'
    ext.mockito_version = '1.10.19'
    ext.rx_java_one_version = '1.2.7'
    ext.rx_java_two_version = '2.1.0'
    ext.retrofit_version = '2.1.0'
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.github.ben-manes.versions'

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task updateVersionName {
    doLast {
        def gradlePropertiesFile = new File('gradle.properties')
        def matcher = Pattern.compile('COMMON_VERSION_NAME=(\\d+.\\d+.\\d+)').matcher(gradlePropertiesFile.text)
        if (matcher.find()) {
            def gradlePropertiesText = new StringBuilder(gradlePropertiesFile.text).replace(matcher.start(1), matcher.end(1), versionName)
            gradlePropertiesFile.text = gradlePropertiesText
        }
    }
}

task updateReadme {
    doLast {
        def readmeFile = new File('README.md')
        def matcher = Pattern.compile("com.elpassion.android.commons:\\w+-?\\w+:(\\d+.\\d+.\\d+)").matcher(readmeFile.text)
        while (matcher.find()) {
            def readmeText = new StringBuilder(readmeFile.text).replace(matcher.start(1), matcher.end(1), "${commonVersionName()}")
            readmeFile.text = readmeText
        }
    }
}

int commonVersionCode() {
    return 1
}

String commonVersionName() {
    return COMMON_VERSION_NAME
}

int commonCompileSdkVersion() {
    return 25
}

int commonTargetSdkVersion() {
    return commonCompileSdkVersion()
}

int commonMinSdkVersion() {
    return 16
}

String commonBuildToolsVersion() {
    return '26.0.0'
}

boolean isCI() {
    return "true" == System.env.CI
}

boolean isOnMasterBranch() {
    return "master" == System.env.TRAVIS_BRANCH
}
