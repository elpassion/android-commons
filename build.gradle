import java.util.regex.Pattern

buildscript {
    ext.support_version = '27.1.1'
    ext.kotlin_version = '1.2.61'
    ext.espresso_version = '3.0.2'
    ext.test_runner = '1.0.1'
    ext.mockito_kotlin = '1.5.0'
    ext.mockito_version = '1.10.19'
    ext.rx_java_two_version = '2.2.1'
    ext.retrofit_version = '2.3.0'
    ext.mockito_android_version = '2.11.0'
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0-rc02'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}
plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
}
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.asciidoctor.convert'

asciidoctorj {
    version = '1.5.4'
}

asciidoctor {
    sourceDir = new File(project.rootDir,'docs')
    outputDir = file('docs')
    attributes  \
         'build-gradle': file('build.gradle'),
            'stylesheet': 'styles/wider_asciidoctor.css'
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://maven.google.com" }
    }
}

task updateVersionName {
    doLast {
        def gradlePropertiesFile = new File('gradle.properties')
        def matcher = Pattern.compile('COMMON_VERSION_NAME=(\\d+.\\d+.\\d+)').matcher(gradlePropertiesFile.text)
        if (matcher.find()) {
            def gradlePropertiesText = new StringBuilder(gradlePropertiesFile.text).replace(matcher.start(1), matcher.end(1), versionName)
            gradlePropertiesFile.text = gradlePropertiesText
        }
    }
}

task updateReadme {
    doLast {
        def readmeFile = new File('docs/index.adoc')
        def matcher = Pattern.compile(":version: (\\d+.\\d+.\\d+)").matcher(readmeFile.text)
        while (matcher.find()) {
            def readmeText = new StringBuilder(readmeFile.text).replace(matcher.start(1), matcher.end(1), "${commonVersionName()}")
            readmeFile.text = readmeText
        }
    }
}

task copyToRoot(type: Copy) {
    from 'docs/html5' into '.'
}

task updateDocs dependsOn updateReadme, asciidoctor, copyToRoot

int commonVersionCode() {
    return 1
}

String commonVersionName() {
    return COMMON_VERSION_NAME
}

int commonCompileSdkVersion() {
    return 27
}

int commonTargetSdkVersion() {
    return commonCompileSdkVersion()
}

int commonMinSdkVersion() {
    return 16
}

boolean isCI() {
    return "true" == System.env.CI
}

boolean isOnMasterBranch() {
    return "master" == System.env.TRAVIS_BRANCH
}
